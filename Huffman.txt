Aplicacao de Arvores: Codigo de Huffman

Aplicacao de Arvores: Codigo de Huffman

SCC0202 - Algoritmos e Estruturas de Dados I

Prof. Fernando V. Paulovich
http://www.icmc.usp.br/~paulovic

paulovic@icmc.usp.br

Instituto de Ciencias Matematicas e de Computacao (ICMC)
Universidade de Sao Paulo (USP)

11 de novembro de 2013

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Sumario

1 Conceitos Introdutorios

2 Codigo de Huffman

3 Implementacao

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Sumario

1 Conceitos Introdutorios

2 Codigo de Huffman

3 Implementacao

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Introducao

Com o crescimento da quantidade de dados gerados e
transmitidos, compactacao desses se torna cada dia mais
essencial

Armazenamento de dados (imagens medicas)
5000Å~ 3000Å~ 2 = 30Mbytes

Transmissao de dados (Internet)
Um metodo de compactacao bem conhecido, o codigo de
Huffman, se baseia em arvores binarias

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Introducao

Em um texto nao compactado, um caractere e
representado por um byte (ASCII), de forma que todo
caractere e representado pelo mesmo numero de bits

Caractere Decimal Binario
A 65 01000000
B 66 01000001
C 67 01000010
. . .
X 88 01011000
Y 89 01011001
Z 90 01011010

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Introducao

Existem diversas formas de se compactar dados, a mais
comum e buscar reduzir o numero de bits que
representam os caracteres mais frequentes

Seja E o caractere mais frequente (em ingles isso e
verdade), supondo que ele seja codificado com dois bits,
01

Nao e possivel codificar todo alfabeto com dois bits: 00,
01, 10 e 11
Podemos usar essas quatro combinacoes para codificar os
quatro caracteres mais frequentes?

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Introducao

Nenhum caractere pode ser representado pela mesma
combinacao de bits que aparece no inicio de um codigo
mais longo

Se E e 01 e X e 01011000, nao e possivel diferenciar
um do outro

Regra
Nenhum codigo pode ser o prefixo de qualquer outro
codigo

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Introducao

Nenhum caractere pode ser representado pela mesma
combinacao de bits que aparece no inicio de um codigo
mais longo

Se E e 01 e X e 01011000, nao e possivel diferenciar
um do outro

Regra
Nenhum codigo pode ser o prefixo de qualquer outro
codigo

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Introducao

Quando a frequencia dos caracteres e conhecida a priori,
e o documento segue essa frequencia, essa abordagem
funciona
Porem, nem sempre isso e verdade

Artigo de jornal X codigo fonte Java
Entao e preciso fazer uma contagem

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Introducao

Suponha a mensagem \u201cSUSIE SAYS IT IS EASY\u201d

Caractere Contagem
A 2
E 2
I 3
S 6
T 1
U 1
Y 2
Espaco 4
Avanco de linha 1

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Introducao

Definindo que os caracteres mais frequentes devem ser
codificados com um numero pequeno de bits, a seguinte
decodificacao pode ser usada

Caractere Contagem Codigo
A 2 010
E 2 1111
I 3 110
S 6 10
T 1 0110
U 1 01111
Y 2 1110
Espaco 4 00
Avanco de linha 1 01110

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Introducao

Usando essa codificacao, \u201cSUSIE SAYS IT IS EASY\u201d seria
transformada em

10 01111 10 110 1111 00 10 010 1110 10 00 110 0110 0110
00 110 10 00 1111 010 10 1110 01110

Taxa de Compactacao

Tc = 1\u2212 68
22Å~ 8 = 1\u2212

68

196
= 0, 614

Aplicacao de Arvores: Codigo de Huffman
Conceitos Introdutorios

Introducao

Usando essa codificacao, \u201cSUSIE SAYS IT IS EASY\u201d seria
transformada em

10 01111 10 110 1111 00 10 010 1110 10 00 110 0110 0110
00 110 10 00 1111 010 10 1110 01110

Taxa de Compactacao

Tc = 1\u2212 68
22Å~ 8 = 1\u2212

68

196
= 0, 614

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Sumario

1 Conceitos Introdutorios

2 Codigo de Huffman

3 Implementacao

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Decodificando com a Arvore de Huffman

Antes de vermos como
codificar, vamos ver um
processo mais facil: a
decodificacao
Para se decodificar uma
dada cadeia de bits e
obtermos os caracteres
originais usamos um tipo de
arvore binaria conhecida
como arvore de Huffman

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Decodificando com a Arvore de Huffman

Os caracteres das
mensagem aparecem na
arvore como folhas
Quanto mais alta a
frequencia de um termo,
mais alto ele aparecera na
arvore
Numeros representam as
frequencias

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Decodificando com a Arvore de Huffman

Decodificando: para cada
simbolo de entrada (bit)

Se aparecer um bit 0,
desce para a esquerda
Se aparecer um bit 1,
desce para a direita

Atingiu uma folha, achou a
codificacao
Repete o processo para o
proximo simbolo de entrada

A = 010

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Criando a Arvore de Huffman I

Existem diversas formas de se criar a arvore de Huffman,
aqui vamos usar a abordagem mais comum

Inicializacao
1 Crie uma no da arvore para cada caractere distinto da

mensagem
2 Crie uma lista de nos ordenada de acordo com a

frequencia de ocorrencia dos caracteres

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Criando a Arvore de Huffman II

Montagem
1 Remova da lista de nos, os dois nos menos frequentes
2 Crie um novo no, cuja frequencia seja a soma das

frequencias dos dois nos retirados
3 Defina como o filho da esquerda desse novo no, o no com

a menor frequencia dos retirados, e como filho da direita
o mais frequente

4 Insira esse novo no na lista ordenada de nos
5 Repita os passos 1 a 4 ate restar apenas um no na lista
6 Esse no representa a arvore de Huffman

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Criando a Arvore de Huffman

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Criando a Arvore de Huffman

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Codificando uma Mensagem

Para se codificar uma mensagem, primeiro
deve-se criar uma tabela que mapeie cada
caractere de entrada em um codigo definido pela
arvore

Um jeito simples e criar um vetor onde os
indices representam os codigos ASCII e que as
celulas armazenem os bits da codificacao

Por exemplo, o caractere A pode ficar no indice 0,
o B no indice 1, e assim por diante

Assim, para se codificar uma mensagem, para
cada caractere de entrada, um valor da tabela e
escolhido

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Criando o Codigo de Huffman

O processo para se criar o codigo de Huffman para cada
caractere distinto e similar a decodificacao de uma
mensagem

1 Dado um no folha, parte-se da raiz ate alcanca-lo
Se desceu pelo filho da esquerda, acrescenta 0 ao codigo
Se desceu pelo filho da direita, acrescenta 1 ao codigo

Aplicacao de Arvores: Codigo de Huffman
Codigo de Huffman

Criando o Codigo de Huffman

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Sumario

1 Conceitos Introdutorios

2 Codigo de Huffman

3 Implementacao

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Arvore Binaria (Huffman)

1 typedef struct NO {
2 int simbolo;
3 int frequencia;
4
5 struct NO *filhoesq;
6 struct NO *filhodir;
7 } NO;
8
9 typedef struct ARVORE_BINARIA {

10 NO *raiz;
11 } ARVORE_BINARIA;
12
13 ARVORE_BINARIA *criar_arvore();
14 void apagar_arvore(ARVORE_BINARIA **arvore);
15 NO *criar_raiz(ARVORE_BINARIA *arvore, NO *no);

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Heap Minimo

1 typedef struct heap_estatica HEAP_ESTATICA;
2
3 HEAP_ESTATICA *criar_heap();
4 void apagar_heap(HEAP_ESTATICA **heap);
5
6 int inserir_heap(HEAP_ESTATICA *heap, NO *no);
7 NO *remover_heap(HEAP_ESTATICA *heap);
8
9 int cheia_heap(HEAP_ESTATICA *heap);

10 int vazia_heap(HEAP_ESTATICA *heap);
11 int tamanho_heap(HEAP_ESTATICA *heap);

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Arvore Binaria (Huffman)

1 #define TAM 500
2
3 struct huffman {
4 ARVORE_BINARIA *arvore;
5 char codigo[TAM][TAM];
6 };

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Arvore Binaria (Huffman)

1 HUFFMAN *criar_huffman() {
2 HUFFMAN *huffman = (HUFFMAN *) malloc(sizeof (HUFFMAN));
3 int i;
4
5 if (huffman != NULL) {
6 for (i = 0; i < TAM; i++) {
7 huffman->codigo[i][0] = '\0';
8 }
9 huffman->arvore = NULL;

10 }
11
12 return huffman;
13 }
14
15 void apagar_huffman(HUFFMAN **huffman) {
16 apagar_arvore(&((*huffman)->arvore));
17 free(*huffman);
18 *huffman = NULL;
19 }

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Criar Arvore

1 void criar_arvore_huffman(HUFFMAN *huffman, char *msg) {
2 int i, freq[TAM];
3 for (i = 0; i < TAM; i++) freq[i] = 0;
4 for (i = 0; msg[i] != '\0'; i++) freq[(int) msg[i]]++;
5
6 HEAP_ESTATICA *heap = criar_heap();
7
8 for (i = 0; i < TAM; i++) {
9 if (freq[i] > 0) {

10 NO *pno = (NO *) malloc(sizeof (NO));
11 pno->simbolo = i;
12 pno->frequencia = freq[i];
13 pno->filhodir = NULL;
14 pno->filhoesq = NULL;
15 inserir_heap(heap, pno);
16 }
17 }
18 ...
19 }

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Criar Arvore

1 void criar_arvore_huffman(HUFFMAN *huffman, char *msg) {
2 ...
3
4 while (tamanho_heap(heap) > 1) {
5 NO *pno = (NO *) malloc(sizeof (NO));
6 pno->simbolo = '#';
7 pno->filhoesq = remover_heap(heap);
8 pno->filhodir = remover_heap(heap);
9 pno->frequencia = pno->filhoesq->frequencia + pno->filhodir->\u2190\u21a9

frequencia;
10 inserir_heap(heap, pno);
11 }
12
13 huffman->arvore = criar_arvore();
14 criar_raiz(huffman->arvore, remover_heap(heap));
15 apagar_heap(&heap);
16 }

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Criando o Codigo

1 void criar_codigo(HUFFMAN *huffman) {
2 char codigo[TAM];
3 criar_codigo_aux(huffman, huffman->arvore->raiz, codigo, -1);
4 }

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Criando o Codigo

1 void criar_codigo_aux(HUFFMAN *huffman, NO *no, char *cod, int fim) {
2 if (no != NULL) {
3 if (no->filhoesq == NULL && no->filhodir == NULL) {
4 int i;
5 for (i = 0; i <= fim; i++) {
6 huffman->codigo[(int) no->simbolo][i] = cod[i];
7 }
8 huffman->codigo[(int) no->simbolo][fim + 1] = '\0';
9 } else {

10 if (no->filhoesq != NULL) {
11 fim++;
12 cod[fim] = '0';
13 criar_codigo_aux(huffman, no->filhoesq, cod, fim);
14 fim--;
15 }
16
17 if (no->filhodir != NULL) {
18 fim++;
19 cod[fim] = '1';
20 criar_codigo_aux(huffman, no->filhodir, cod, fim);
21 fim--;
22 }
23 }
24 }
25 }

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Codificando uma Mensagem

1 void codificar(HUFFMAN *huffman, char *msg, char *cod) {
2 int i, j, cod_fim;
3 cod_fim = -1;
4
5 for (i = 0; msg[i] != '\0'; i++) {
6 char *pcod = huffman->codigo[(int) msg[i]];
7
8 for (j = 0; pcod[j] != '\0'; j++) {
9 cod_fim++;

10 cod[cod_fim] = pcod[j];
11 }
12 }
13
14 cod[cod_fim + 1] = '\0';
15 }

Aplicacao de Arvores: Codigo de Huffman
Implementacao

Decodificando um Codigo

1 int decodificar(HUFFMAN *huffman, char *cod, char *msg) {
2 int i, decod_fim;
3 decod_fim = -1;
4
5 NO *pno = huffman->arvore->raiz;
6
7 for (i = 0; cod[i] != '\0'; i++) {
8 if (cod[i] == '0') {
9 pno = pno->filhoesq;

10 } else if (cod[i] == '1') {
11 pno = pno->filhodir;
12 } else {
13 return 0;
14 }
15
16 if (pno->filhoesq == NULL && pno->filhodir == NULL) {
17 decod_fim++;
18 msg[decod_fim] = pno->simbolo;
19 pno = huffman->arvore->raiz;
20 }
21 }
22
23 msg[decod_fim + 1] = '\0';
24 return 1;
25 }